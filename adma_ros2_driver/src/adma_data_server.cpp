#include "adma_ros2_driver/adma_data_server.hpp"
#include <rclcpp_components/register_node_macro.hpp>
#include <sys/socket.h>
#include <arpa/inet.h>
/**
 * @brief This helper class can "simulate" the ADMA to send its message stream. 
 * can be used to validate the correct parsing of the driver node
 */
namespace genesys
{
        DataServer::DataServer(const rclcpp::NodeOptions &options) : Node("data_server", options),
        _sendSocketfd(-1),
        _socketAdress(),
        _adressLength(4)
        {
                // read ros parameters
                _frequence = this->declare_parameter("frequence", 20);
                 std::string ip_adress = this->declare_parameter("ip_address", "127.0.0.1");
                _port = this->declare_parameter("port", 1040);
                
                // setup socket for sending data
                 _sendSocketfd = socket(AF_INET, SOCK_DGRAM | SOCK_CLOEXEC, IPPROTO_UDP);
                 _adressLength = sizeof(_socketAdress);
                memset((char *) &_socketAdress, 0, _adressLength);
                _socketAdress.sin_family = AF_INET;
                _socketAdress.sin_port = htons(_port);
                inet_aton(ip_adress.c_str(), &(_socketAdress.sin_addr));

                updateLoop();
        }

        DataServer::~DataServer(){
                ::shutdown(_sendSocketfd, SHUT_RDWR);
        }

        void DataServer::updateLoop(){
                unsigned char msg[] = {
                        0x47,0x42,0x49,0x4e,0x00,0x01,
                        0x00,0x01,0x00,0x30,0x00,0x10,0x00,0x04,0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe8,0x75,0x00,0x00,0x41,0x44,
                        0x4d,0x41,0x20,0x53,0x4e,0x3a,0x33,0x30,0x31,0x38,0x34,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,
                        0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x0b,0x43,0x00,0x00,0x44,0x17,
                        0x00,0x00,0x04,0x00,0x00,0x00,0x49,0x36,0x20,0x45,0x11,0x20,0x00,0x81,0x00,0x02,
                        0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x2d,0xff,
                        0xff,0xff,0x38,0x00,0x00,0x00,0xd1,0xfe,0xff,0xff,0x0f,0x27,0x00,0x00,0x96,0xff,
                        0xff,0xff,0xfe,0xff,0xfd,0xff,0xff,0xff,0x00,0x00,0xfe,0xff,0xfd,0xff,0xff,0xff,
                        0x00,0x00,0x19,0x00,0x0e,0x00,0xc4,0x09,0x00,0x00,0x00,0x00,0x03,0x00,0xc4,0x09,
                        0x00,0x00,0x1c,0x00,0x0f,0x00,0xd4,0x09,0x00,0x00,0x1b,0x00,0x08,0x00,0xb9,0x09,
                        0x00,0x00,0x1d,0x00,0x08,0x00,0xc4,0x09,0x00,0x00,0x19,0x00,0x0e,0x00,0xc4,0x09,
                        0x00,0x00,0x1b,0x00,0x10,0x00,0xd0,0x09,0x00,0x00,0x1b,0x00,0x0c,0x00,0xc3,0x09,
                        0x00,0x00,0x19,0x00,0x0e,0x00,0xc4,0x09,0x00,0x00,0x19,0x00,0x0e,0x00,0xc4,0x09,
                        0x00,0x00,0x03,0x00,0x05,0x00,0xd4,0x09,0x00,0x00,0x02,0x00,0xfd,0xff,0xb9,0x09,
                        0x00,0x00,0x04,0x00,0xfd,0xff,0xc4,0x09,0x00,0x00,0x00,0x00,0x03,0x00,0xc4,0x09,
                        0x00,0x00,0x01,0x00,0x06,0x00,0xd0,0x09,0x00,0x00,0x01,0x00,0x01,0x00,0xc3,0x09,
                        0x00,0x00,0x00,0x00,0x03,0x00,0xc4,0x09,0x00,0x00,0x00,0x00,0x03,0x00,0xc4,0x09,
                        0x00,0x00,0xfa,0xff,0xf9,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0xfa,0xff,0xf9,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x27,0x59,0x01,0x28,0x00,
                        0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x18,0x00,0xc6,0xff,0xa0,0x8c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0xbf,0xff,0xff,0xff,0xbb,0xff,0xff,0xff,0xba,0xff,0xff,0xff,0x01,0x00,
                        0x00,0x00,0xe0,0xff,0xff,0xff,0xdd,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x01,0x00,
                        0x00,0x00,0x3a,0x08,0x04,0x00,0x00,0x00,0x12,0x00,0x7d,0xc5,0xf7,0x1c,0xb3,0x71,
                        0xb5,0x04,0x00,0x7c,0x36,0x20,0x20,0x16,0x79,0x03,0xcc,0xc6,0xf7,0x1c,0xb3,0x71,
                        0xb5,0x04,0x40,0x7d,0x36,0x20,0x18,0x16,0x79,0x03,0x10,0xc5,0xf7,0x1c,0x35,0x71,
                        0xb5,0x04,0x40,0x7b,0x36,0x20,0xc0,0x15,0x79,0x03,0x10,0xc5,0xf7,0x1c,0x30,0x72,
                        0xb5,0x04,0x40,0x7b,0x36,0x20,0x78,0x16,0x79,0x03,0x7d,0xc5,0xf7,0x1c,0xb3,0x71,
                        0xb5,0x04,0x00,0x7c,0x36,0x20,0x20,0x16,0x79,0x03,0x81,0xc6,0xf7,0x1c,0xb3,0x71,
                        0xb5,0x04,0xc0,0x7c,0x36,0x20,0x18,0x16,0x79,0x03,0x75,0xc5,0xf7,0x1c,0xb3,0x71,
                        0xb5,0x04,0xc0,0x7b,0x36,0x20,0x18,0x16,0x79,0x03,0x7d,0xc5,0xf7,0x1c,0xb3,0x71,
                        0xb5,0x04,0x00,0x7c,0x36,0x20,0x20,0x16,0x79,0x03,0x7d,0xc5,0xf7,0x1c,0xb3,0x71,
                        0xb5,0x04,0x00,0x7c,0x36,0x20,0x20,0x16,0x79,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2d,0x01,0x2d,0x01,0x2d,0x01,
                        0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0xfe,0xff,0xfa,0xff,0x00,0x00,
                        0xfb,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00
                };

                while(rclcpp::ok()){
                        ::sendto(_sendSocketfd, (void*)(&msg), sizeof(msg), 0, (struct sockaddr *) &_socketAdress, _adressLength);
                        RCLCPP_INFO(get_logger(), "sended payload: %ld", sizeof(msg));
                        std::this_thread::sleep_for(std::chrono::milliseconds(1000 / _frequence));
                }
                
        }
} // end namespace genesys
RCLCPP_COMPONENTS_REGISTER_NODE(genesys::DataServer)
